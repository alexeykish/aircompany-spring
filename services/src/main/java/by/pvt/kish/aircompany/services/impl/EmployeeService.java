package by.pvt.kish.aircompany.services.impl;

import by.pvt.kish.aircompany.constants.Message;
import by.pvt.kish.aircompany.dao.impl.EmployeeDAO;
import by.pvt.kish.aircompany.enums.EmployeeStatus;
import by.pvt.kish.aircompany.exceptions.DaoException;
import by.pvt.kish.aircompany.exceptions.ServiceException;
import by.pvt.kish.aircompany.exceptions.ServiceValidateException;
import by.pvt.kish.aircompany.pojos.Employee;
import by.pvt.kish.aircompany.pojos.Flight;
import by.pvt.kish.aircompany.services.BaseService;
import by.pvt.kish.aircompany.services.IEmployeeService;
import by.pvt.kish.aircompany.validators.EmployeeValidator;
import org.apache.log4j.Logger;

import java.util.Date;
import java.util.List;

/**
 * This class represents a concrete implementation of the IService interface for employee model.
 *
 * @author Kish Alexey
 */
public class EmployeeService extends BaseService<Employee> implements IEmployeeService{

    private static Logger logger = Logger.getLogger(EmployeeService.class);
    private static EmployeeService instance;
    private EmployeeDAO employeeDAO = EmployeeDAO.getInstance();
    private EmployeeValidator employeeValidator = new EmployeeValidator();

    /**
     * Returns an synchronized instance of a EmployeeService, if the instance does not exist yet - create a new
     *
     * @return - a instance of a EmployeeService
     */
    public synchronized static EmployeeService getInstance() {
        if (instance == null) {
            instance = new EmployeeService();
        }
        return instance;
    }

    /**
     * Create the employee Entity
     *
     * @param employee - the employee object to be created
     * @return - The ID of the object, generated by DB
     * @throws ServiceException         - if something fails at Service layer
     * @throws ServiceValidateException - if something fails at Service validation
     */
    @Override
    public Long add(Employee employee) throws ServiceException, ServiceValidateException {
            return serviceUtils.addEntity(employeeDAO, employee, employeeValidator);
    }

    /**
     * Update the employee Entity
     *
     * @param employee - The employee object to be updated
     * @throws ServiceException         - if something fails at Service layer
     * @throws ServiceValidateException - if something fails at Service validation
     */
    @Override
    public void update(Employee employee) throws ServiceException, ServiceValidateException {
            serviceUtils.updateEntity(employeeDAO, employee, employeeValidator);
    }

    /**
     * Returns a list of all employees
     *
     * @return a list of all employees
     * @throws ServiceException - if something fails at Service layer
     */
    @Override
    public List<Employee> getAll() throws ServiceException {
            return serviceUtils.getAllEntities(employeeDAO);
    }

    /**
     * Delete the employee Entity
     *
     * @param id - ID of the employee object to be deleted
     * @throws ServiceException - if something fails at Service layer
     */
    @Override
    public void delete(Long id) throws ServiceException {
            serviceUtils.deleteEntity(employeeDAO, id);
    }

    /**
     * Returns the employee entity matching the given ID
     *
     * @param id - The ID of the employee entity to be returned
     * @return - the employee entity matching the given ID
     * @throws ServiceException - if something fails at Service layer
     */
    @Override
    public Employee getById(Long id) throws ServiceException {
            return serviceUtils.getByIdEntity(employeeDAO, id);
    }

    /**
     * Set employees status to the DB
     *
     * @param id     - The ID of the employee
     * @param status - The status to be changed
     * @throws ServiceException If something fails at DAO level
     */
    @Override
    public void setStatus(Long id, EmployeeStatus status) throws ServiceException {
        if (id < 0) {
            throw new ServiceException(Message.ERROR_ID_MISSING);
        }
        try {
            transaction = util.getSession().beginTransaction();
            employeeDAO.setEmployeeStatus(id, status);
            transaction.commit();
            logger.info(SUCCESSFUL_TRANSACTION);
        } catch (DaoException e) {
            transaction.rollback();
            logger.info(TRANSACTION_FAILED);
            throw new ServiceException(e.getMessage());
        }
    }

    /**
     * Returns a list of all available employees at this date from the DB
     *
     * @param date - The date of the flight
     * @return - a list of all available employees at this date from the DB
     * @throws ServiceException If something fails at DAO level
     */
    @Override
    public List<Employee> getAllAvailable(Date date) throws ServiceException {
        List<Employee> results;
        try {
            transaction = util.getSession().beginTransaction();
            results =  employeeDAO.getAllAvailableEmployee(date);
            transaction.commit();
            logger.info(SUCCESSFUL_TRANSACTION);
        } catch (DaoException e) {
            transaction.rollback();
            logger.info(TRANSACTION_FAILED);
            throw new ServiceException(e.getMessage());
        }
        return results;
    }

    /**
     * Check if the employee is in another flight teams at that date
     *
     * @param id - The ID of the employee
     * @param flightDate - The flight date
     * @return - false if employee isn't in another flights at that date, true - if employee is busy at that date
     * @throws DaoException If something fails at DB level
     */
    @Override
    public boolean checkEmployeeAvailability(Long id, Date flightDate) throws ServiceException {
        boolean result;
        if (id < 0) {
            throw new ServiceException(Message.ERROR_ID_MISSING);
        }
        try {
            transaction = util.getSession().beginTransaction();
            result =  employeeDAO.checkEmployeeAvailability(id, flightDate);
            transaction.commit();
            logger.info(SUCCESSFUL_TRANSACTION);
        } catch (DaoException e) {
            transaction.rollback();
            logger.info(TRANSACTION_FAILED);
            throw new ServiceException(e.getMessage());
        }
        return result;
    }

    /**
     * Returns a list of five last flights of the concrete employee from the DB
     *
     * @param id - The ID of the employee
     * @return - the list of last five flight of the concrete employee
     * @throws DaoException If something fails at DB level
     */
    @Override
    public List<Flight> getEmployeeLastFiveFlights(Long id) throws ServiceException {
        List<Flight> results;
        if (id < 0) {
            throw new ServiceException(Message.ERROR_ID_MISSING);
        }
        try {
            transaction = util.getSession().beginTransaction();
            results =  employeeDAO.getEmployeeLastFiveFlights(id);
            transaction.commit();
            logger.info(SUCCESSFUL_TRANSACTION);
        } catch (DaoException e) {
            transaction.rollback();
            logger.info(TRANSACTION_FAILED);
            throw new ServiceException(e.getMessage());
        }
        return results;
    }

    /**
     * Returns a list of employees as flight crew of the concrete flight from the DB
     *
     * @param id - The ID of the flight
     * @return - the list of the employees as flight crew
     * @throws DaoException If something fails at DB level
     */
    @Override
    public List<Employee> getFlightCrewByFlightId(Long id) throws ServiceException {
        List<Employee> results;
        if (id < 0) {
            throw new ServiceException(Message.ERROR_ID_MISSING);
        }
        try {
            transaction = util.getSession().beginTransaction();
            results =  employeeDAO.getFlightCrewByFlightId(id);
            transaction.commit();
            logger.info(SUCCESSFUL_TRANSACTION);
        } catch (DaoException e) {
            transaction.rollback();
            logger.info(TRANSACTION_FAILED);
            throw new ServiceException(e.getMessage());
        }
        return results;
    }
}
