package by.pvt.kish.aircompany.services.impl;

import by.pvt.kish.aircompany.constants.Message;
import by.pvt.kish.aircompany.dao.impl.FlightDAO;
import by.pvt.kish.aircompany.enums.FlightStatus;
import by.pvt.kish.aircompany.exceptions.DaoException;
import by.pvt.kish.aircompany.exceptions.ServiceException;
import by.pvt.kish.aircompany.exceptions.ServiceValidateException;
import by.pvt.kish.aircompany.pojos.Employee;
import by.pvt.kish.aircompany.pojos.Flight;
import by.pvt.kish.aircompany.services.BaseService;
import by.pvt.kish.aircompany.services.IFlightService;
import by.pvt.kish.aircompany.utils.TeamCreator;
import by.pvt.kish.aircompany.validators.FlightValidator;
import org.apache.log4j.Logger;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

/**
 * This class represents a concrete implementation of the IService interface for flight model.
 *
 * @author Kish Alexey
 */
public class FlightService extends BaseService<Flight> implements IFlightService {

    private static Logger logger = Logger.getLogger(FlightService.class);
    private static FlightService instance;
    private FlightDAO flightDAO = FlightDAO.getInstance();
    private FlightValidator flightValidator = new FlightValidator();

    /**
     * Returns an synchronized instance of a FlightService, if the instance does not exist yet - create a new
     *
     * @return - a instance of a FlightService
     */
    public synchronized static FlightService getInstance() {
        if (instance == null) {
            instance = new FlightService();
        }
        return instance;
    }

    /**
     * Create the flight Entity
     *
     * @param flight - the flight object to be created
     * @return - The ID of the flight object, generated by DB
     * @throws ServiceException         - if something fails at Service layer
     * @throws ServiceValidateException - if something fails at Service validation
     */
    @Override
    public Long add(Flight flight) throws ServiceException, ServiceValidateException {
        return serviceUtils.addEntity(flightDAO, flight, flightValidator);
    }

    /**
     * Update the flight Entity
     *
     * @param flight - the flight object to be updated
     * @throws ServiceException         - if something fails at Service layer
     * @throws ServiceValidateException - if something fails at Service validation
     */
    @Override
    public void update(Flight flight) throws ServiceException, ServiceValidateException {
        serviceUtils.updateEntity(flightDAO, flight, flightValidator);
    }

    /**
     * Returns a list of all flights
     *
     * @return a list of all flights
     * @throws ServiceException - if something fails at Service layer
     */
    @Override
    public List<Flight> getAll() throws ServiceException {
        return serviceUtils.getAllEntities(flightDAO);
    }

    /**
     * Delete the flight Entity
     *
     * @param id - ID of the flight entity to be deleted
     * @throws ServiceException - if something fails at Service layer
     */
    @Override
    public void delete(Long id) throws ServiceException {
        serviceUtils.deleteEntity(flightDAO, id);
    }

    /**
     * Returns the flight entity matching the given ID
     *
     * @param id - The ID of the flight entity to be returned
     * @return - the flight entity matching the given ID
     * @throws ServiceException - if something fails at Service layer
     */
    @Override
    public Flight getById(Long id) throws ServiceException {
        return serviceUtils.getByIdEntity(flightDAO, id);
    }

    /**
     * Set flight status to the DB
     *
     * @param id     - The ID of the flight
     * @param status - The status to be changed
     * @throws ServiceException If something fails at DAO level
     */
    @Override
    public void setStatus(Long id, FlightStatus status) throws ServiceException {
        if (id < 0) {
            throw new ServiceException(Message.ERROR_ID_MISSING);
        }
        try {
            transaction = util.getSession().beginTransaction();
            flightDAO.setFlightStatus(id, status);
            transaction.commit();
            logger.info(SUCCESSFUL_TRANSACTION);
        } catch (DaoException e) {
            transaction.rollback();
            logger.info(TRANSACTION_FAILED);
            throw new ServiceException(e.getMessage());
        }
    }

    /**
     * Add flight crew to existed flight
     *
     * @param id - The ID of the existed flight
     * @param team - The set of the employees that is flight crew
     * @throws ServiceException If something fails at DAO level
     */
    @Override
    public void addTeam(Long id, List<Long> team) throws ServiceException {
        if (id < 0) {
            throw new ServiceException(Message.ERROR_ID_MISSING);
        }
        Set<Employee> crew = TeamCreator.getEmployeeListById(team);
        try {
            transaction = util.getSession().beginTransaction();
            Flight flight = flightDAO.getById(id);
            flight.setCrew(crew);
            flightDAO.update(flight);
            transaction.commit();
            logger.info(SUCCESSFUL_TRANSACTION);
        } catch (DaoException e) {
            transaction.rollback();
            logger.info(TRANSACTION_FAILED);
            throw new ServiceException(e.getMessage());
        }
    }

    /**
     * Returns a list of flights ordered by date, prepared for pagination from the DB
     *
     * @param pageSize - The number of flights at the page
     * @param pageNumber - The number of the showed page
     * @return - the list of the flights, ordered by date
     * @throws DaoException If something fails at DB level
     */
    @Override
    public List<Flight> getAllToPage(int pageSize, int pageNumber) throws DaoException, ServiceException {
        List<Flight> results = new ArrayList<>();
        try {
            transaction = util.getSession().beginTransaction();
            results = flightDAO.getAllToPage(pageSize, pageNumber);
            transaction.commit();
            logger.info(SUCCESSFUL_TRANSACTION);
        } catch (DaoException e) {
            transaction.rollback();
            logger.info(TRANSACTION_FAILED);
            throw new ServiceException(e.getMessage());
        }
        return results;
    }

    /**
     * Returns the number of flights in the DB
     *
     * @throws DaoException If something fails at DB level
     */
    @Override
    public int getCount() throws DaoException, ServiceException {
        int count;
        try {
            transaction = util.getSession().beginTransaction();
            count = flightDAO.getCount();
            transaction.commit();
            logger.info(SUCCESSFUL_TRANSACTION);
        } catch (DaoException e) {
            transaction.rollback();
            logger.info(TRANSACTION_FAILED);
            throw new ServiceException(e.getMessage());
        }
        return count;
    }
}
