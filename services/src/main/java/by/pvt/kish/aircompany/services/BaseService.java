/**
 *
 */
package by.pvt.kish.aircompany.services;

import by.pvt.kish.aircompany.dao.IDAO;
import by.pvt.kish.aircompany.exceptions.DaoException;
import by.pvt.kish.aircompany.exceptions.ServiceException;
import by.pvt.kish.aircompany.exceptions.ServiceValidateException;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * The abstract class represents a implementation of the IService interface
 *
 * @author Kish Alexey
 */
@Service
@Transactional(propagation = Propagation.REQUIRED)
public abstract class BaseService<T> implements IService<T> {

    private static Logger logger = Logger.getLogger(BaseService.class);
    @Autowired
    private IDAO<T> dao;
    public static final String SUCCESSFUL_TRANSACTION = "Successful transaction";
    public static final String TRANSACTION_FAILED = "Transaction failed";

    public BaseService() {
    }

    protected BaseService(IDAO<T> dao) {
        this.dao = dao;
    }

    /**
     * Create the Airport Entity
     *
     * @param t - the entity to be created
     * @return - The ID of the entity, generated by DB
     * @throws ServiceException         - if something fails at Service layer
     * @throws ServiceValidateException - if something fails at Service validation
     */
    public T add(T t) throws ServiceValidateException, ServiceException {
        try {
//            String validateResult = validator.validate(t);
//            if (validateResult != null) {
//                throw new ServiceValidateException(validateResult);
//            }
            t = dao.add(t);
            logger.debug(SUCCESSFUL_TRANSACTION);
        } catch (DaoException e) {
            logger.debug(TRANSACTION_FAILED);
            throw new ServiceException(e.getMessage());
        }
        return t;
    }

    /**
     * Update the Entity
     *
     * @param t - the entity to be updated
     * @throws ServiceException         - if something fails at Service layer
     * @throws ServiceValidateException - if something fails at Service validation
     */
    public void update(T t) throws ServiceValidateException, ServiceException {
        try {
//            String validateResult = validator.validate(t);
//            if (validateResult != null) {
//                throw new ServiceValidateException(validateResult);
//            }
            dao.update(t);
            logger.debug(SUCCESSFUL_TRANSACTION);
        } catch (DaoException e) {
            logger.debug(TRANSACTION_FAILED);
            throw new ServiceException(e.getMessage());
        }
    }

    /**
     * Returns a list of all entities
     *
     * @return a list of all entities
     * @throws ServiceException - if something fails at Service layer
     */
    @Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
    public List<T> getAll() throws ServiceException {
        List<T> results;
        try {
            results = dao.getAll();
        } catch (DaoException e) {
            throw new ServiceException(e.getMessage());
        }
        return results;
    }

    /**
     * Delete the given entity
     *
     * @param id - The ID of the entity to be deleted
     * @throws ServiceException - if something fails at Service layer
     */
    public void delete(Long id) throws ServiceException {
        try {
            if (id == null) {
                throw new ServiceException("ERROR_ID_MISSING");
            }
            dao.delete(id);
            logger.debug(SUCCESSFUL_TRANSACTION);
        } catch (DaoException e) {
            logger.debug(TRANSACTION_FAILED);
            throw new ServiceException(e.getMessage());
        }
    }

    /**
     * Returns the entity matching the given ID
     *
     * @param id - The ID of the entity to be returned
     * @return - The entity matching the given ID
     * @throws ServiceException - if something fails at Service layer
     */
    @Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
    public T getById(Long id) throws ServiceException {
        T t;
        try {
            if (id == null) {
                throw new ServiceException("ERROR_ID_MISSING");
            }
            t = dao.getById(id);
        } catch (DaoException e) {
            throw new ServiceException(e.getMessage());
        }
        return t;
    }
}
