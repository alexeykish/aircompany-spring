package by.pvt.kish.aircompany.services.impl;

import by.pvt.kish.aircompany.dao.impl.AirportDAO;
import by.pvt.kish.aircompany.exceptions.ServiceException;
import by.pvt.kish.aircompany.exceptions.ServiceValidateException;
import by.pvt.kish.aircompany.pojos.Airport;
import by.pvt.kish.aircompany.services.BaseService;
import by.pvt.kish.aircompany.validators.AirportValidator;

import java.util.List;

/**
 * This class represents a concrete implementation of the IService interface for airport model.
 *
 * @author Kish Alexey
 */
public class AirportService extends BaseService<Airport> {

    private static AirportService instance;
    private AirportDAO airportDAO = AirportDAO.getInstance();
    private AirportValidator airportValidator = new AirportValidator();

    /**
     * Returns an synchronized instance of a AirportService, if the instance does not exist yet - create a new
     *
     * @return - a instance of a AirportService
     */
    public synchronized static AirportService getInstance() {
        if (instance == null) {
            instance = new AirportService();
        }
        return instance;
    }

    /**
     * Create the Airport Entity
     *
     * @param airport - the airport to be created
     * @return - The ID of the airport, generated by DB
     * @throws ServiceException         - if something fails at Service layer
     * @throws ServiceValidateException - if something fails at Service validation
     */
    @Override
    public Long add(Airport airport) throws ServiceException, ServiceValidateException {
        return serviceUtils.addEntity(airportDAO, airport, airportValidator);
    }

    /**
     * Update the Airport Entity
     *
     * @param airport - the aiport to be updated
     * @throws ServiceException         - if something fails at Service layer
     * @throws ServiceValidateException - if something fails at Service validation
     */
    @Override
    public void update(Airport airport) throws ServiceException, ServiceValidateException {
        serviceUtils.updateEntity(airportDAO, airport, airportValidator);
    }

    /**
     * Returns a list of all airports
     *
     * @return a list of all airports
     * @throws ServiceException - if something fails at Service layer
     */
    @Override
    public List<Airport> getAll() throws ServiceException {
        return serviceUtils.getAllEntities(airportDAO);
    }

    /**
     * Delete the given airport
     *
     * @param id - The ID of the airport to be deleted
     * @throws ServiceException - if something fails at Service layer
     */
    @Override
    public void delete(Long id) throws ServiceException {
        serviceUtils.deleteEntity(airportDAO, id);
    }

    /**
     * Returns the airport matching the given ID
     *
     * @param id - The ID of the airport to be returned
     * @return - the airport matching the given ID
     * @throws ServiceException - if something fails at Service layer
     */
    @Override
    public Airport getById(Long id) throws ServiceException {
        return serviceUtils.getByIdEntity(airportDAO, id);
    }
}
