package by.pvt.kish.aircompany.services.impl;

import by.pvt.kish.aircompany.constants.Message;
import by.pvt.kish.aircompany.dao.IUserDAO;
import by.pvt.kish.aircompany.enums.UserStatus;
import by.pvt.kish.aircompany.exceptions.DaoException;
import by.pvt.kish.aircompany.exceptions.ServiceException;
import by.pvt.kish.aircompany.exceptions.ServiceLoginException;
import by.pvt.kish.aircompany.exceptions.ServiceValidateException;
import by.pvt.kish.aircompany.pojos.User;
import by.pvt.kish.aircompany.services.BaseService;
import by.pvt.kish.aircompany.services.IUserService;
import by.pvt.kish.aircompany.validators.UserValidator;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

/**
 * This class represents a concrete implementation of the IUserService interface for user model.
 *
 * @author Kish Alexey
 */
@Service
@Transactional(propagation = Propagation.REQUIRED)
public class UserService extends BaseService<User> implements IUserService {

    private static Logger logger = Logger.getLogger(UserService.class);
    private UserValidator userValidator = new UserValidator();

    @Autowired
    private IUserDAO userDAO;

    /**
     * Create the user Entity
     *
     * @param user - The user object to be created
     * @return - The ID of the user object, generated by DB
     * @throws ServiceException         - if something fails at Service layer
     * @throws ServiceValidateException - if something fails at Service validation
     * @throws ServiceLoginException    - if something fails at Service user authorisation
     */
    @Override
    public User addUser(User user) throws ServiceException, ServiceLoginException, ServiceValidateException {
        try {
            String validateResult = userValidator.validate(user);
            if (validateResult != null) {
                throw new ServiceValidateException(validateResult);
            }
            if (!userDAO.checkLogin(user.getLogin())) {
                throw new ServiceLoginException(Message.ERROR_REG_USER_EXISTS);
            } else {
                user =  userDAO.add(user);
                logger.debug(SUCCESSFUL_TRANSACTION);
            }
        } catch (DaoException e) {
            logger.debug(TRANSACTION_FAILED);
            throw new ServiceException(e);
        }
        return user;
    }

    /**
     * Checks unique login to the DB
     *
     * @param login - checked login
     * @return false is login exists, true is don`t
     * @throws DaoException If something fails at DB level
     */
    @Override
    @Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
    public boolean checkLogin(String login) throws ServiceException {
        boolean result;
        try {
            result = userDAO.checkLogin(login);
        } catch (DaoException e) {
            throw new ServiceException(e.getMessage());
        }
        return result;
    }

    /**
     * Returns the user from the DB matching the given login and password
     *
     * @param login    - login of the user to be returned
     * @param password - password of the user to be returned
     * @return The user from the DB matching the given login and password
     * @throws DaoException If something fails at DB level
     */
    @Override
    public User getUser(String login, String password) throws ServiceException, ServiceLoginException {
        User user;
        try {
            user = userDAO.getUser(login, password);
            if (user == null) {
                throw new ServiceLoginException(Message.ERROR_REG_LOGIN);
            } else if (user.getStatus().equals(UserStatus.ONLINE)) {
                throw new ServiceLoginException(Message.ERROR_REG_USER_EXISTS);
            } else {
                userDAO.setStatus(user.getUid(), UserStatus.ONLINE);
                user.setStatus(UserStatus.ONLINE); //TODO возможно лишнее
            }
            logger.debug(SUCCESSFUL_TRANSACTION);
        } catch (DaoException e) {
            logger.debug(TRANSACTION_FAILED);
            throw new ServiceException(e.getMessage());
        }
        return user;
    }

    /**
     * Set user status to DB
     *
     * @param id     - The ID of the user to be set
     * @param status - The status to be set
     * @throws DaoException If something fails at DB level
     */
    @Override
    public void setStatus(Long id, UserStatus status) throws ServiceException, ServiceValidateException {
        try {
            if (id == null) {
                throw new ServiceException(Message.ERROR_ID_MISSING);
            }
            userDAO.setStatus(id, status);
            logger.info(SUCCESSFUL_TRANSACTION);
        } catch (DaoException e) {
            logger.info(TRANSACTION_FAILED);
            throw new ServiceException(e.getMessage());
        }
    }

    /**
     * Create the given Entity
     *
     * @param user - object to be created
     * @return - The ID of the object, generated by DB
     * @throws ServiceException         - if something fails at Service layer
     * @throws ServiceValidateException - if something fails at Service validation
     */
    @Override
    public User add(User user) throws ServiceException, ServiceValidateException {
        throw new UnsupportedOperationException();
    }
}
